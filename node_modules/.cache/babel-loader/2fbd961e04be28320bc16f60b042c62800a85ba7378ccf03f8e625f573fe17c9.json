{"ast":null,"code":"var _jsxFileName = \"/Users/giovannygarcia/my-project/solo/src/components/Todo/TodoForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Navbar from \"../layout/Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoForm() {\n  _s();\n  const [task, setTask] = useState('');\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3001/get').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const todosWithId = data.map(todo => ({\n        ...todo,\n        id: todo._id.$oid\n      }));\n      setTodos(todosWithId);\n    }).catch(err => console.log(err));\n  }, []);\n  console.log(todos);\n\n  //Function for adding tasks\n  const handleAdd = async e => {\n    e.preventDefault(); //Will prevent default form submission behavior\n    try {\n      const response = await fetch('http://localhost:3001/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task: task\n        }) //Send the task in the request body\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n        setTask(''); //clear the task after successful addition\n      } else {\n        throw new Error('Network response was not ok'); //Handle http errors\n      }\n    } catch (error) {\n      console.log(error); //Handle network errors\n    }\n  };\n\n  //Handle edit function\n  const handleEdit = id => {\n    //log current todos to inspect them\n    console.log('Current todos:', todos);\n    //find todo item by id\n    const todo = todos.find(item => item.id === id);\n    if (!todo) {\n      console.log('Todo item not found');\n      return;\n    }\n\n    //Toggle the 'done' status\n    const updatedTodo = {\n      ...todo,\n      done: !todo.done\n    };\n\n    //send the updated todo item to the server\n    fetch(`http://localhost:3001/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTodo)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(updatedItem => {\n      // Update the state with the new todo list\n      setTodos(todos.map(item => item.id === id ? updatedItem : item));\n    }).catch(err => console.log(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"todo-form\",\n    onSubmit: handleAdd,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"TodoItem\",\n      placeholder: \"... needs to be done\",\n      onChange: e => setTask(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoForm, \"OIlS0cj44Yo9VcrZ6MUC8lKJ4Sg=\");\n_c = TodoForm;\nexport default TodoForm;\nvar _c;\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["useState","Navbar","jsxDEV","_jsxDEV","TodoForm","_s","task","setTask","todos","setTodos","useEffect","fetch","then","response","ok","Error","json","data","todosWithId","map","todo","id","_id","$oid","catch","err","console","log","handleAdd","e","preventDefault","method","headers","body","JSON","stringify","result","error","handleEdit","find","item","updatedTodo","done","updatedItem","className","onSubmit","children","type","name","placeholder","onChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/giovannygarcia/my-project/solo/src/components/Todo/TodoForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport Navbar from \"../layout/Navbar\";\n\nfunction TodoForm() {\n  const [task, setTask] = useState('')\n\n  const [todos, setTodos] = useState([])\n    useEffect(() => {\n        fetch('http://localhost:3001/get')\n          .then(response => {\n            if(!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n            return response.json();\n          })\n          .then(data => {\n            const todosWithId = data.map(todo => ({\n              ...todo,\n              id: todo._id.$oid\n            }));\n              setTodos(todosWithId);\n          })\n          .catch(err => console.log(err));\n    }, [])\n\n    console.log(todos);\n\n\n\n  //Function for adding tasks\n  const handleAdd = async (e) => {\n    e.preventDefault(); //Will prevent default form submission behavior\n    try {\n      const response = await fetch('http://localhost:3001/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({task: task}), //Send the task in the request body\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n        setTask('') //clear the task after successful addition\n      } else {\n        throw new Error('Network response was not ok'); //Handle http errors\n      }\n    } catch (error) {\n      console.log(error); //Handle network errors\n\n    }\n  }\n\n   //Handle edit function\n   const handleEdit = (id) => {\n    //log current todos to inspect them\n    console.log('Current todos:', todos);\n    //find todo item by id\n    const todo = todos.find((item) => item.id === id);\n    if (!todo) {\n      console.log('Todo item not found');\n      return;\n    }\n\n    //Toggle the 'done' status\n    const updatedTodo = {...todo, done: !todo.done };\n\n    //send the updated todo item to the server\n    fetch(`http://localhost:3001/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(updatedTodo),\n    })\n    .then(response => {\n      if(!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(updatedItem => {\n      // Update the state with the new todo list\n      setTodos(todos.map((item) => item.id === id ? updatedItem : item));\n    })\n    .catch(err => console.log(err));\n  }\n\n\n  return (\n    <form className='todo-form' onSubmit={handleAdd}>\n      <input type='text'\n        name='TodoItem'\n        placeholder='... needs to be done'\n        onChange={(e) => setTask(e.target.value)}\n      />\n      <button type='submit'>Add</button>\n    </form>\n  );\n}\n\nexport default TodoForm;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpCU,SAAS,CAAC,MAAM;IACZC,KAAK,CAAC,2BAA2B,CAAC,CAC/BC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAE;QACf,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZ,MAAMC,WAAW,GAAGD,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;QACpC,GAAGA,IAAI;QACPC,EAAE,EAAED,IAAI,CAACE,GAAG,CAACC;MACf,CAAC,CAAC,CAAC;MACDd,QAAQ,CAACS,WAAW,CAAC;IACzB,CAAC,CAAC,CACDM,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAENC,OAAO,CAACC,GAAG,CAACnB,KAAK,CAAC;;EAIpB;EACA,MAAMoB,SAAS,GAAG,MAAOC,CAAC,IAAK;IAC7BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMF,KAAK,CAAC,2BAA2B,EAAE;QACxDoB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAC7B,IAAI,EAAEA;QAAI,CAAC,CAAC,CAAE;MACtC,CAAC,CAAC;MAEF,IAAIO,QAAQ,CAACC,EAAE,EAAE;QACf,MAAMsB,MAAM,GAAG,MAAMvB,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpCU,OAAO,CAACC,GAAG,CAACS,MAAM,CAAC;QACnB7B,OAAO,CAAC,EAAE,CAAC,EAAC;MACd,CAAC,MAAM;QACL,MAAM,IAAIQ,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;MAClD;IACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACdX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC,CAAC,CAAC;IAEtB;EACF,CAAC;;EAEA;EACA,MAAMC,UAAU,GAAIjB,EAAE,IAAK;IAC1B;IACAK,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEnB,KAAK,CAAC;IACpC;IACA,MAAMY,IAAI,GAAGZ,KAAK,CAAC+B,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACnB,EAAE,KAAKA,EAAE,CAAC;IACjD,IAAI,CAACD,IAAI,EAAE;MACTM,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClC;IACF;;IAEA;IACA,MAAMc,WAAW,GAAG;MAAC,GAAGrB,IAAI;MAAEsB,IAAI,EAAE,CAACtB,IAAI,CAACsB;IAAK,CAAC;;IAEhD;IACA/B,KAAK,CAAE,gCAA+BU,EAAG,EAAC,EAAE;MAC1CU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,WAAW;IAClC,CAAC,CAAC,CACD7B,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAE;QACf,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAC+B,WAAW,IAAI;MACnB;MACAlC,QAAQ,CAACD,KAAK,CAACW,GAAG,CAAEqB,IAAI,IAAKA,IAAI,CAACnB,EAAE,KAAKA,EAAE,GAAGsB,WAAW,GAAGH,IAAI,CAAC,CAAC;IACpE,CAAC,CAAC,CACDhB,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACjC,CAAC;EAGD,oBACEtB,OAAA;IAAMyC,SAAS,EAAC,WAAW;IAACC,QAAQ,EAAEjB,SAAU;IAAAkB,QAAA,gBAC9C3C,OAAA;MAAO4C,IAAI,EAAC,MAAM;MAChBC,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,sBAAsB;MAClCC,QAAQ,EAAGrB,CAAC,IAAKtB,OAAO,CAACsB,CAAC,CAACsB,MAAM,CAACC,KAAK;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eACFrD,OAAA;MAAQ4C,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAG;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEX;AAACnD,EAAA,CAjGQD,QAAQ;AAAAqD,EAAA,GAARrD,QAAQ;AAmGjB,eAAeA,QAAQ;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}