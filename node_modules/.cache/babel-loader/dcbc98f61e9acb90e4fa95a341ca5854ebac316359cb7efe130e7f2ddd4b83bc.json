{"ast":null,"code":"// import { useEffect, useState } from 'react';\n// import logo from '../../peach.png';\n// import TodoForm from './TodoForm.js'\n// import { CircleFill, TrashFill } from 'react-bootstrap-icons';\n\n// function Navbar() {\n//     const [todos, setTodos] = useState([])\n//     useEffect(() => {\n//         fetch('http://localhost:3001/get')\n//           .then(response => {\n//             if(!response.ok) {\n//               throw new Error('Network response was not ok');\n//             }\n//             return response.json();\n//           })\n//           .then(data => {\n//             const todosWithId = data.map(todo => ({\n//               ...todo,\n//               id: todo._id.$oid\n//             }));\n//               setTodos(todosWithId);\n//           })\n//           .catch(err => console.log(err));\n//     }, [])\n\n//     console.log(todos);\n\n//     //Handle edit function\n//     const handleEdit = (id) => {\n//       //log current todos to inspect them\n//       console.log('Current todos:', todos);\n//       //find todo item by id\n//       const todo = todos.find((item) => item.id === id);\n//       if (!todo) {\n//         console.log('Todo item not found');\n//         return;\n//       }\n\n//       //Toggle the 'done' status\n//       const updatedTodo = {...todo, done: !todo.done };\n\n//       //send the updated todo item to the server\n//       fetch(`http://localhost:3001/update/${id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'COntent-type': 'application/json',\n//         },\n//         body: JSON.stringify(updatedTodo),\n//       })\n//       .then(response => {\n//         if(!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(updatedItem => {\n//         // Update the state with the new todo list\n//         setTodos(todos.map((item) => item.id === id ? updatedItem : item));\n//       })\n//       .catch(err => console.log(err));\n//     }\n\n//   return (\n//     <nav className=\"Navbar\">\n//       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//       <h1>What I gotta do.</h1>\n//       <TodoForm/>\n//       {\n//   todos.length === 0\n//     ? <div><h2>Nothing Planned Yet</h2></div>\n//     : todos.map(todo => ( // Assuming each todo has a unique id\n//         <div className='task' key={todo.id}> {/* Use todo.id instead of index for key */}\n//           <div className='checkbox' onClick={() => handleEdit(todo._id)}>\n//             <CircleFill className='icon' />\n//             <p>{todo.task}</p>\n//           </div>\n//           <div>\n//             <span /*onClick={() => handleDelete(todo.id)}*/><TrashFill className='icon'/></span>\n//           </div>\n//         </div>\n//       ))\n// }\n\n//     </nav>\n//   );\n// }\n\n// export default Navbar;","map":{"version":3,"names":[],"sources":["/Users/giovannygarcia/my-project/solo/src/components/Navbar.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\n// import logo from '../../peach.png';\n// import TodoForm from './TodoForm.js'\n// import { CircleFill, TrashFill } from 'react-bootstrap-icons';\n\n// function Navbar() {\n//     const [todos, setTodos] = useState([])\n//     useEffect(() => {\n//         fetch('http://localhost:3001/get')\n//           .then(response => {\n//             if(!response.ok) {\n//               throw new Error('Network response was not ok');\n//             }\n//             return response.json();\n//           })\n//           .then(data => {\n//             const todosWithId = data.map(todo => ({\n//               ...todo,\n//               id: todo._id.$oid\n//             }));\n//               setTodos(todosWithId);\n//           })\n//           .catch(err => console.log(err));\n//     }, [])\n\n//     console.log(todos);\n\n//     //Handle edit function\n//     const handleEdit = (id) => {\n//       //log current todos to inspect them\n//       console.log('Current todos:', todos);\n//       //find todo item by id\n//       const todo = todos.find((item) => item.id === id);\n//       if (!todo) {\n//         console.log('Todo item not found');\n//         return;\n//       }\n\n//       //Toggle the 'done' status\n//       const updatedTodo = {...todo, done: !todo.done };\n\n//       //send the updated todo item to the server\n//       fetch(`http://localhost:3001/update/${id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'COntent-type': 'application/json',\n//         },\n//         body: JSON.stringify(updatedTodo),\n//       })\n//       .then(response => {\n//         if(!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(updatedItem => {\n//         // Update the state with the new todo list\n//         setTodos(todos.map((item) => item.id === id ? updatedItem : item));\n//       })\n//       .catch(err => console.log(err));\n//     }\n\n//   return (\n//     <nav className=\"Navbar\">\n//       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//       <h1>What I gotta do.</h1>\n//       <TodoForm/>\n//       {\n//   todos.length === 0\n//     ? <div><h2>Nothing Planned Yet</h2></div>\n//     : todos.map(todo => ( // Assuming each todo has a unique id\n//         <div className='task' key={todo.id}> {/* Use todo.id instead of index for key */}\n//           <div className='checkbox' onClick={() => handleEdit(todo._id)}>\n//             <CircleFill className='icon' />\n//             <p>{todo.task}</p>\n//           </div>\n//           <div>\n//             <span /*onClick={() => handleDelete(todo.id)}*/><TrashFill className='icon'/></span>\n//           </div>\n//         </div>\n//       ))\n// }\n\n//     </nav>\n//   );\n// }\n\n// export default Navbar;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}